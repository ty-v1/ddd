/* tslint:disable */
/* eslint-disable */
/**
 * DDD
 * Title
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateLabelRequest,
    CreateLabelRequestFromJSON,
    CreateLabelRequestToJSON,
    CreateProjectRequest,
    CreateProjectRequestFromJSON,
    CreateProjectRequestToJSON,
    CreateTaskRequest,
    CreateTaskRequestFromJSON,
    CreateTaskRequestToJSON,
    LabelResponse,
    LabelResponseFromJSON,
    LabelResponseToJSON,
    ProjectResponse,
    ProjectResponseFromJSON,
    ProjectResponseToJSON,
    SuspendTimerResponse,
    SuspendTimerResponseFromJSON,
    SuspendTimerResponseToJSON,
    TaskResponse,
    TaskResponseFromJSON,
    TaskResponseToJSON,
    UpdateLabelRequest,
    UpdateLabelRequestFromJSON,
    UpdateLabelRequestToJSON,
    UpdateProjectRequest,
    UpdateProjectRequestFromJSON,
    UpdateProjectRequestToJSON,
    UpdateTaskRequest,
    UpdateTaskRequestFromJSON,
    UpdateTaskRequestToJSON,
} from '../models';

export interface LabelsLabelIdDeleteRequest {
    labelId: string;
}

export interface LabelsLabelIdPutRequest {
    labelId: string;
    updateLabelRequest?: UpdateLabelRequest;
}

export interface LabelsPostRequest {
    createLabelRequest?: CreateLabelRequest;
}

export interface ProjectsPostRequest {
    createProjectRequest?: CreateProjectRequest;
}

export interface ProjectsProjectIdDeleteRequest {
    projectId: string;
}

export interface ProjectsProjectIdGetRequest {
    projectId: string;
}

export interface ProjectsProjectIdPutRequest {
    projectId: string;
    updateProjectRequest?: UpdateProjectRequest;
}

export interface TasksPostRequest {
    createTaskRequest?: CreateTaskRequest;
}

export interface TasksTaskIdDeleteRequest {
    taskId: string;
}

export interface TasksTaskIdPutRequest {
    taskId: string;
    updateTaskRequest?: UpdateTaskRequest;
}

export interface TasksTaskIdStartTimerPostRequest {
    taskId: string;
}

export interface TasksTaskIdSuspendTimerPostRequest {
    taskId: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * ラベルの削除
     */
    async labelsLabelIdDeleteRaw(requestParameters: LabelsLabelIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.labelId === null || requestParameters.labelId === undefined) {
            throw new runtime.RequiredError('labelId','Required parameter requestParameters.labelId was null or undefined when calling labelsLabelIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/labels/{labelId}`.replace(`{${"labelId"}}`, encodeURIComponent(String(requestParameters.labelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ラベルの削除
     */
    async labelsLabelIdDelete(requestParameters: LabelsLabelIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.labelsLabelIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * ラベルの更新
     */
    async labelsLabelIdPutRaw(requestParameters: LabelsLabelIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LabelResponse>> {
        if (requestParameters.labelId === null || requestParameters.labelId === undefined) {
            throw new runtime.RequiredError('labelId','Required parameter requestParameters.labelId was null or undefined when calling labelsLabelIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/labels/{labelId}`.replace(`{${"labelId"}}`, encodeURIComponent(String(requestParameters.labelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLabelRequestToJSON(requestParameters.updateLabelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelResponseFromJSON(jsonValue));
    }

    /**
     * ラベルの更新
     */
    async labelsLabelIdPut(requestParameters: LabelsLabelIdPutRequest, initOverrides?: RequestInit): Promise<LabelResponse> {
        const response = await this.labelsLabelIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ラベルの作成
     */
    async labelsPostRaw(requestParameters: LabelsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LabelResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/labels/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLabelRequestToJSON(requestParameters.createLabelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelResponseFromJSON(jsonValue));
    }

    /**
     * ラベルの作成
     */
    async labelsPost(requestParameters: LabelsPostRequest, initOverrides?: RequestInit): Promise<LabelResponse> {
        const response = await this.labelsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロジェクトの作成
     */
    async projectsPostRaw(requestParameters: ProjectsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectRequestToJSON(requestParameters.createProjectRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * プロジェクトの作成
     */
    async projectsPost(requestParameters: ProjectsPostRequest, initOverrides?: RequestInit): Promise<ProjectResponse> {
        const response = await this.projectsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロジェクトの削除
     */
    async projectsProjectIdDeleteRaw(requestParameters: ProjectsProjectIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * プロジェクトの削除
     */
    async projectsProjectIdDelete(requestParameters: ProjectsProjectIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsProjectIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * プロジェクト取得(1件)
     */
    async projectsProjectIdGetRaw(requestParameters: ProjectsProjectIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * プロジェクト取得(1件)
     */
    async projectsProjectIdGet(requestParameters: ProjectsProjectIdGetRequest, initOverrides?: RequestInit): Promise<ProjectResponse> {
        const response = await this.projectsProjectIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロジェクトの更新
     */
    async projectsProjectIdPutRaw(requestParameters: ProjectsProjectIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectRequestToJSON(requestParameters.updateProjectRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * プロジェクトの更新
     */
    async projectsProjectIdPut(requestParameters: ProjectsProjectIdPutRequest, initOverrides?: RequestInit): Promise<ProjectResponse> {
        const response = await this.projectsProjectIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * タスクの作成
     */
    async tasksPostRaw(requestParameters: TasksPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TaskResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tasks/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskRequestToJSON(requestParameters.createTaskRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskResponseFromJSON(jsonValue));
    }

    /**
     * タスクの作成
     */
    async tasksPost(requestParameters: TasksPostRequest, initOverrides?: RequestInit): Promise<TaskResponse> {
        const response = await this.tasksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * タスクの削除
     */
    async tasksTaskIdDeleteRaw(requestParameters: TasksTaskIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling tasksTaskIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * タスクの削除
     */
    async tasksTaskIdDelete(requestParameters: TasksTaskIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.tasksTaskIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * タスクの更新
     */
    async tasksTaskIdPutRaw(requestParameters: TasksTaskIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TaskResponse>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling tasksTaskIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/tasks/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTaskRequestToJSON(requestParameters.updateTaskRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskResponseFromJSON(jsonValue));
    }

    /**
     * タスクの更新
     */
    async tasksTaskIdPut(requestParameters: TasksTaskIdPutRequest, initOverrides?: RequestInit): Promise<TaskResponse> {
        const response = await this.tasksTaskIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 計測時間の記録開始
     */
    async tasksTaskIdStartTimerPostRaw(requestParameters: TasksTaskIdStartTimerPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling tasksTaskIdStartTimerPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{taskId}/start_timer`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 計測時間の記録開始
     */
    async tasksTaskIdStartTimerPost(requestParameters: TasksTaskIdStartTimerPostRequest, initOverrides?: RequestInit): Promise<void> {
        await this.tasksTaskIdStartTimerPostRaw(requestParameters, initOverrides);
    }

    /**
     * 計測時間の記録を一時停止
     */
    async tasksTaskIdSuspendTimerPostRaw(requestParameters: TasksTaskIdSuspendTimerPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<SuspendTimerResponse>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling tasksTaskIdSuspendTimerPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/tasks/{taskId}/suspend_timer`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuspendTimerResponseFromJSON(jsonValue));
    }

    /**
     * 計測時間の記録を一時停止
     */
    async tasksTaskIdSuspendTimerPost(requestParameters: TasksTaskIdSuspendTimerPostRequest, initOverrides?: RequestInit): Promise<SuspendTimerResponse> {
        const response = await this.tasksTaskIdSuspendTimerPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
