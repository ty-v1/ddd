/* tslint:disable */
/* eslint-disable */
/**
 * DDD
 * Title
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ColumnResponse,
    ColumnResponseFromJSON,
    ColumnResponseToJSON,
    CreateColumnRequest,
    CreateColumnRequestFromJSON,
    CreateColumnRequestToJSON,
    CreateLabelRequest,
    CreateLabelRequestFromJSON,
    CreateLabelRequestToJSON,
    CreateProjectRequest,
    CreateProjectRequestFromJSON,
    CreateProjectRequestToJSON,
    CreateTaskRequest,
    CreateTaskRequestFromJSON,
    CreateTaskRequestToJSON,
    LabelResponse,
    LabelResponseFromJSON,
    LabelResponseToJSON,
    ListColumnResponse,
    ListColumnResponseFromJSON,
    ListColumnResponseToJSON,
    ListProjectResponse,
    ListProjectResponseFromJSON,
    ListProjectResponseToJSON,
    ListTaskResponse,
    ListTaskResponseFromJSON,
    ListTaskResponseToJSON,
    MoveTaskRequest,
    MoveTaskRequestFromJSON,
    MoveTaskRequestToJSON,
    ProjectResponse,
    ProjectResponseFromJSON,
    ProjectResponseToJSON,
    TaskResponse,
    TaskResponseFromJSON,
    TaskResponseToJSON,
    UpdateColumnRequest,
    UpdateColumnRequestFromJSON,
    UpdateColumnRequestToJSON,
    UpdateLabelRequest,
    UpdateLabelRequestFromJSON,
    UpdateLabelRequestToJSON,
    UpdateProjectRequest,
    UpdateProjectRequestFromJSON,
    UpdateProjectRequestToJSON,
    UpdateTaskRequest,
    UpdateTaskRequestFromJSON,
    UpdateTaskRequestToJSON,
} from '../models';

export interface DeleteProjectsProjectIdColumnsColumnIdRequest {
    projectId: string;
    columnId: string;
}

export interface GetProjectsProjectIdColumnsRequest {
    projectId: string;
}

export interface GetProjectsProjectIdColumnsColumnIdRequest {
    projectId: string;
    columnId: string;
}

export interface GetProjectsProjectIdTasksRequest {
    projectId: string;
    columnId?: string;
}

export interface PostProjectsProjectIdColumnsRequest {
    projectId: string;
    createColumnRequest?: CreateColumnRequest;
}

export interface PostProjectsProjectIdTasksTaskIdMoveRequest {
    projectId: string;
    taskId: string;
    moveTaskRequest?: MoveTaskRequest;
}

export interface ProjectsPostRequest {
    createProjectRequest?: CreateProjectRequest;
}

export interface ProjectsProjectIdDeleteRequest {
    projectId: string;
}

export interface ProjectsProjectIdGetRequest {
    projectId: string;
}

export interface ProjectsProjectIdLabelsLabelIdDeleteRequest {
    projectId: string;
    labelId: string;
}

export interface ProjectsProjectIdLabelsLabelIdPutRequest {
    projectId: string;
    labelId: string;
    updateLabelRequest?: UpdateLabelRequest;
}

export interface ProjectsProjectIdLabelsPostRequest {
    projectId: string;
    createLabelRequest?: CreateLabelRequest;
}

export interface ProjectsProjectIdPutRequest {
    projectId: string;
    updateProjectRequest?: UpdateProjectRequest;
}

export interface ProjectsProjectIdTasksPostRequest {
    projectId: string;
    createTaskRequest?: CreateTaskRequest;
}

export interface ProjectsProjectIdTasksTaskIdDeleteRequest {
    projectId: string;
    taskId: string;
}

export interface ProjectsProjectIdTasksTaskIdPutRequest {
    projectId: string;
    taskId: string;
    updateTaskRequest?: UpdateTaskRequest;
}

export interface PutProjectsProjectIdColumnsColumnIdRequest {
    projectId: string;
    columnId: string;
    updateColumnRequest?: UpdateColumnRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * カラム削除
     */
    async deleteProjectsProjectIdColumnsColumnIdRaw(requestParameters: DeleteProjectsProjectIdColumnsColumnIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteProjectsProjectIdColumnsColumnId.');
        }

        if (requestParameters.columnId === null || requestParameters.columnId === undefined) {
            throw new runtime.RequiredError('columnId','Required parameter requestParameters.columnId was null or undefined when calling deleteProjectsProjectIdColumnsColumnId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/columns/{columnId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"columnId"}}`, encodeURIComponent(String(requestParameters.columnId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * カラム削除
     */
    async deleteProjectsProjectIdColumnsColumnId(requestParameters: DeleteProjectsProjectIdColumnsColumnIdRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteProjectsProjectIdColumnsColumnIdRaw(requestParameters, initOverrides);
    }

    /**
     * プロジェクト一覧を取得
     */
    async getProjectsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListProjectResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListProjectResponseFromJSON(jsonValue));
    }

    /**
     * プロジェクト一覧を取得
     */
    async getProjects(initOverrides?: RequestInit): Promise<ListProjectResponse> {
        const response = await this.getProjectsRaw(initOverrides);
        return await response.value();
    }

    /**
     * カラム取得
     */
    async getProjectsProjectIdColumnsRaw(requestParameters: GetProjectsProjectIdColumnsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListColumnResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectsProjectIdColumns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/columns`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListColumnResponseFromJSON(jsonValue));
    }

    /**
     * カラム取得
     */
    async getProjectsProjectIdColumns(requestParameters: GetProjectsProjectIdColumnsRequest, initOverrides?: RequestInit): Promise<ListColumnResponse> {
        const response = await this.getProjectsProjectIdColumnsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * カラム
     */
    async getProjectsProjectIdColumnsColumnIdRaw(requestParameters: GetProjectsProjectIdColumnsColumnIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ColumnResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectsProjectIdColumnsColumnId.');
        }

        if (requestParameters.columnId === null || requestParameters.columnId === undefined) {
            throw new runtime.RequiredError('columnId','Required parameter requestParameters.columnId was null or undefined when calling getProjectsProjectIdColumnsColumnId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/columns/{columnId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"columnId"}}`, encodeURIComponent(String(requestParameters.columnId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColumnResponseFromJSON(jsonValue));
    }

    /**
     * カラム
     */
    async getProjectsProjectIdColumnsColumnId(requestParameters: GetProjectsProjectIdColumnsColumnIdRequest, initOverrides?: RequestInit): Promise<ColumnResponse> {
        const response = await this.getProjectsProjectIdColumnsColumnIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectsProjectIdTasksRaw(requestParameters: GetProjectsProjectIdTasksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ListTaskResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectsProjectIdTasks.');
        }

        const queryParameters: any = {};

        if (requestParameters.columnId !== undefined) {
            queryParameters['columnId'] = requestParameters.columnId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/tasks/`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTaskResponseFromJSON(jsonValue));
    }

    /**
     */
    async getProjectsProjectIdTasks(requestParameters: GetProjectsProjectIdTasksRequest, initOverrides?: RequestInit): Promise<ListTaskResponse> {
        const response = await this.getProjectsProjectIdTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * カラム追加
     */
    async postProjectsProjectIdColumnsRaw(requestParameters: PostProjectsProjectIdColumnsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ColumnResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling postProjectsProjectIdColumns.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/columns`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateColumnRequestToJSON(requestParameters.createColumnRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColumnResponseFromJSON(jsonValue));
    }

    /**
     * カラム追加
     */
    async postProjectsProjectIdColumns(requestParameters: PostProjectsProjectIdColumnsRequest, initOverrides?: RequestInit): Promise<ColumnResponse> {
        const response = await this.postProjectsProjectIdColumnsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * カードの移動
     */
    async postProjectsProjectIdTasksTaskIdMoveRaw(requestParameters: PostProjectsProjectIdTasksTaskIdMoveRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling postProjectsProjectIdTasksTaskIdMove.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling postProjectsProjectIdTasksTaskIdMove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/tasks/{taskId}/move`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MoveTaskRequestToJSON(requestParameters.moveTaskRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * カードの移動
     */
    async postProjectsProjectIdTasksTaskIdMove(requestParameters: PostProjectsProjectIdTasksTaskIdMoveRequest, initOverrides?: RequestInit): Promise<void> {
        await this.postProjectsProjectIdTasksTaskIdMoveRaw(requestParameters, initOverrides);
    }

    /**
     * プロジェクトの作成
     */
    async projectsPostRaw(requestParameters: ProjectsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateProjectRequestToJSON(requestParameters.createProjectRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * プロジェクトの作成
     */
    async projectsPost(requestParameters: ProjectsPostRequest, initOverrides?: RequestInit): Promise<ProjectResponse> {
        const response = await this.projectsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロジェクトの削除
     */
    async projectsProjectIdDeleteRaw(requestParameters: ProjectsProjectIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * プロジェクトの削除
     */
    async projectsProjectIdDelete(requestParameters: ProjectsProjectIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsProjectIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * プロジェクト取得(1件)
     */
    async projectsProjectIdGetRaw(requestParameters: ProjectsProjectIdGetRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * プロジェクト取得(1件)
     */
    async projectsProjectIdGet(requestParameters: ProjectsProjectIdGetRequest, initOverrides?: RequestInit): Promise<ProjectResponse> {
        const response = await this.projectsProjectIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ラベルの削除
     */
    async projectsProjectIdLabelsLabelIdDeleteRaw(requestParameters: ProjectsProjectIdLabelsLabelIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdLabelsLabelIdDelete.');
        }

        if (requestParameters.labelId === null || requestParameters.labelId === undefined) {
            throw new runtime.RequiredError('labelId','Required parameter requestParameters.labelId was null or undefined when calling projectsProjectIdLabelsLabelIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/labels/{labelId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"labelId"}}`, encodeURIComponent(String(requestParameters.labelId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ラベルの削除
     */
    async projectsProjectIdLabelsLabelIdDelete(requestParameters: ProjectsProjectIdLabelsLabelIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsProjectIdLabelsLabelIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * ラベルの更新
     */
    async projectsProjectIdLabelsLabelIdPutRaw(requestParameters: ProjectsProjectIdLabelsLabelIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LabelResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdLabelsLabelIdPut.');
        }

        if (requestParameters.labelId === null || requestParameters.labelId === undefined) {
            throw new runtime.RequiredError('labelId','Required parameter requestParameters.labelId was null or undefined when calling projectsProjectIdLabelsLabelIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/labels/{labelId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"labelId"}}`, encodeURIComponent(String(requestParameters.labelId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateLabelRequestToJSON(requestParameters.updateLabelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelResponseFromJSON(jsonValue));
    }

    /**
     * ラベルの更新
     */
    async projectsProjectIdLabelsLabelIdPut(requestParameters: ProjectsProjectIdLabelsLabelIdPutRequest, initOverrides?: RequestInit): Promise<LabelResponse> {
        const response = await this.projectsProjectIdLabelsLabelIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ラベルの作成
     */
    async projectsProjectIdLabelsPostRaw(requestParameters: ProjectsProjectIdLabelsPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<LabelResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdLabelsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/labels/`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateLabelRequestToJSON(requestParameters.createLabelRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelResponseFromJSON(jsonValue));
    }

    /**
     * ラベルの作成
     */
    async projectsProjectIdLabelsPost(requestParameters: ProjectsProjectIdLabelsPostRequest, initOverrides?: RequestInit): Promise<LabelResponse> {
        const response = await this.projectsProjectIdLabelsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * プロジェクトの更新
     */
    async projectsProjectIdPutRaw(requestParameters: ProjectsProjectIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ProjectResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateProjectRequestToJSON(requestParameters.updateProjectRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectResponseFromJSON(jsonValue));
    }

    /**
     * プロジェクトの更新
     */
    async projectsProjectIdPut(requestParameters: ProjectsProjectIdPutRequest, initOverrides?: RequestInit): Promise<ProjectResponse> {
        const response = await this.projectsProjectIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * タスクの作成
     */
    async projectsProjectIdTasksPostRaw(requestParameters: ProjectsProjectIdTasksPostRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TaskResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdTasksPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/tasks/`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTaskRequestToJSON(requestParameters.createTaskRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskResponseFromJSON(jsonValue));
    }

    /**
     * タスクの作成
     */
    async projectsProjectIdTasksPost(requestParameters: ProjectsProjectIdTasksPostRequest, initOverrides?: RequestInit): Promise<TaskResponse> {
        const response = await this.projectsProjectIdTasksPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * タスクの削除
     */
    async projectsProjectIdTasksTaskIdDeleteRaw(requestParameters: ProjectsProjectIdTasksTaskIdDeleteRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdTasksTaskIdDelete.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling projectsProjectIdTasksTaskIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects/{projectId}/tasks/{taskId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * タスクの削除
     */
    async projectsProjectIdTasksTaskIdDelete(requestParameters: ProjectsProjectIdTasksTaskIdDeleteRequest, initOverrides?: RequestInit): Promise<void> {
        await this.projectsProjectIdTasksTaskIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * タスクの更新
     */
    async projectsProjectIdTasksTaskIdPutRaw(requestParameters: ProjectsProjectIdTasksTaskIdPutRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TaskResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling projectsProjectIdTasksTaskIdPut.');
        }

        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling projectsProjectIdTasksTaskIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/tasks/{taskId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTaskRequestToJSON(requestParameters.updateTaskRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskResponseFromJSON(jsonValue));
    }

    /**
     * タスクの更新
     */
    async projectsProjectIdTasksTaskIdPut(requestParameters: ProjectsProjectIdTasksTaskIdPutRequest, initOverrides?: RequestInit): Promise<TaskResponse> {
        const response = await this.projectsProjectIdTasksTaskIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * カラム更新
     */
    async putProjectsProjectIdColumnsColumnIdRaw(requestParameters: PutProjectsProjectIdColumnsColumnIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ColumnResponse>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling putProjectsProjectIdColumnsColumnId.');
        }

        if (requestParameters.columnId === null || requestParameters.columnId === undefined) {
            throw new runtime.RequiredError('columnId','Required parameter requestParameters.columnId was null or undefined when calling putProjectsProjectIdColumnsColumnId.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/projects/{projectId}/columns/{columnId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"columnId"}}`, encodeURIComponent(String(requestParameters.columnId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateColumnRequestToJSON(requestParameters.updateColumnRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ColumnResponseFromJSON(jsonValue));
    }

    /**
     * カラム更新
     */
    async putProjectsProjectIdColumnsColumnId(requestParameters: PutProjectsProjectIdColumnsColumnIdRequest, initOverrides?: RequestInit): Promise<ColumnResponse> {
        const response = await this.putProjectsProjectIdColumnsColumnIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
