// tslint:disable
/**
 * DDD
 * Title
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    CreateLabelRequest,
    CreateProjectRequest,
    LabelResponse,
    ProjectResponse,
    UpdateLabelRequest,
    UpdateProjectRequest,
} from '../models';

export interface LabelsLabelIdDeleteRequest {
    labelId: string;
}

export interface LabelsLabelIdPutRequest {
    labelId: string;
    updateLabelRequest?: UpdateLabelRequest;
}

export interface LabelsPostRequest {
    createLabelRequest?: CreateLabelRequest;
}

export interface ProjectsPostRequest {
    createProjectRequest?: CreateProjectRequest;
}

export interface ProjectsProjectIdDeleteRequest {
    projectId: string;
}

export interface ProjectsProjectIdGetRequest {
    projectId: string;
}

export interface ProjectsProjectIdPutRequest {
    projectId: string;
    updateProjectRequest?: UpdateProjectRequest;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * ラベルの削除
     */
    labelsLabelIdDelete({ labelId }: LabelsLabelIdDeleteRequest): Observable<void>
    labelsLabelIdDelete({ labelId }: LabelsLabelIdDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    labelsLabelIdDelete({ labelId }: LabelsLabelIdDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(labelId, 'labelId', 'labelsLabelIdDelete');

        return this.request<void>({
            url: '/labels/{labelId}'.replace('{labelId}', encodeURI(labelId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * ラベルの更新
     */
    labelsLabelIdPut({ labelId, updateLabelRequest }: LabelsLabelIdPutRequest): Observable<LabelResponse>
    labelsLabelIdPut({ labelId, updateLabelRequest }: LabelsLabelIdPutRequest, opts?: OperationOpts): Observable<RawAjaxResponse<LabelResponse>>
    labelsLabelIdPut({ labelId, updateLabelRequest }: LabelsLabelIdPutRequest, opts?: OperationOpts): Observable<LabelResponse | RawAjaxResponse<LabelResponse>> {
        throwIfNullOrUndefined(labelId, 'labelId', 'labelsLabelIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LabelResponse>({
            url: '/labels/{labelId}'.replace('{labelId}', encodeURI(labelId)),
            method: 'PUT',
            headers,
            body: updateLabelRequest,
        }, opts?.responseOpts);
    };

    /**
     * ラベルの作成
     */
    labelsPost({ createLabelRequest }: LabelsPostRequest): Observable<LabelResponse>
    labelsPost({ createLabelRequest }: LabelsPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<LabelResponse>>
    labelsPost({ createLabelRequest }: LabelsPostRequest, opts?: OperationOpts): Observable<LabelResponse | RawAjaxResponse<LabelResponse>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LabelResponse>({
            url: '/labels/',
            method: 'POST',
            headers,
            body: createLabelRequest,
        }, opts?.responseOpts);
    };

    /**
     * プロジェクトの作成
     */
    projectsPost({ createProjectRequest }: ProjectsPostRequest): Observable<ProjectResponse>
    projectsPost({ createProjectRequest }: ProjectsPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ProjectResponse>>
    projectsPost({ createProjectRequest }: ProjectsPostRequest, opts?: OperationOpts): Observable<ProjectResponse | RawAjaxResponse<ProjectResponse>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ProjectResponse>({
            url: '/projects',
            method: 'POST',
            headers,
            body: createProjectRequest,
        }, opts?.responseOpts);
    };

    /**
     * プロジェクトの削除
     */
    projectsProjectIdDelete({ projectId }: ProjectsProjectIdDeleteRequest): Observable<void>
    projectsProjectIdDelete({ projectId }: ProjectsProjectIdDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    projectsProjectIdDelete({ projectId }: ProjectsProjectIdDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdDelete');

        return this.request<void>({
            url: '/projects/{projectId}'.replace('{projectId}', encodeURI(projectId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * プロジェクト取得(1件)
     */
    projectsProjectIdGet({ projectId }: ProjectsProjectIdGetRequest): Observable<ProjectResponse>
    projectsProjectIdGet({ projectId }: ProjectsProjectIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ProjectResponse>>
    projectsProjectIdGet({ projectId }: ProjectsProjectIdGetRequest, opts?: OperationOpts): Observable<ProjectResponse | RawAjaxResponse<ProjectResponse>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdGet');

        return this.request<ProjectResponse>({
            url: '/projects/{projectId}'.replace('{projectId}', encodeURI(projectId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * プロジェクトの更新
     */
    projectsProjectIdPut({ projectId, updateProjectRequest }: ProjectsProjectIdPutRequest): Observable<ProjectResponse>
    projectsProjectIdPut({ projectId, updateProjectRequest }: ProjectsProjectIdPutRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ProjectResponse>>
    projectsProjectIdPut({ projectId, updateProjectRequest }: ProjectsProjectIdPutRequest, opts?: OperationOpts): Observable<ProjectResponse | RawAjaxResponse<ProjectResponse>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ProjectResponse>({
            url: '/projects/{projectId}'.replace('{projectId}', encodeURI(projectId)),
            method: 'PUT',
            headers,
            body: updateProjectRequest,
        }, opts?.responseOpts);
    };

}
