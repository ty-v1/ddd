// tslint:disable
/**
 * DDD
 * Title
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, throwIfNullOrUndefined, encodeURI, OperationOpts, RawAjaxResponse } from '../runtime';
import {
    CreateLabelRequest,
    CreateProjectRequest,
    CreateTaskRequest,
    LabelResponse,
    ProjectResponse,
    TaskResponse,
    UpdateLabelRequest,
    UpdateProjectRequest,
    UpdateTaskRequest,
} from '../models';

export interface ProjectsPostRequest {
    createProjectRequest?: CreateProjectRequest;
}

export interface ProjectsProjectIdDeleteRequest {
    projectId: string;
}

export interface ProjectsProjectIdGetRequest {
    projectId: string;
}

export interface ProjectsProjectIdLabelsLabelIdDeleteRequest {
    projectId: string;
    labelId: string;
}

export interface ProjectsProjectIdLabelsLabelIdPutRequest {
    projectId: string;
    labelId: string;
    updateLabelRequest?: UpdateLabelRequest;
}

export interface ProjectsProjectIdLabelsPostRequest {
    projectId: string;
    createLabelRequest?: CreateLabelRequest;
}

export interface ProjectsProjectIdPutRequest {
    projectId: string;
    updateProjectRequest?: UpdateProjectRequest;
}

export interface ProjectsProjectIdTasksPostRequest {
    projectId: string;
    createTaskRequest?: CreateTaskRequest;
}

export interface ProjectsProjectIdTasksTaskIdDeleteRequest {
    projectId: string;
    taskId: string;
}

export interface ProjectsProjectIdTasksTaskIdPutRequest {
    projectId: string;
    taskId: string;
    updateTaskRequest?: UpdateTaskRequest;
}

/**
 * no description
 */
export class DefaultApi extends BaseAPI {

    /**
     * プロジェクトの作成
     */
    projectsPost({ createProjectRequest }: ProjectsPostRequest): Observable<ProjectResponse>
    projectsPost({ createProjectRequest }: ProjectsPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ProjectResponse>>
    projectsPost({ createProjectRequest }: ProjectsPostRequest, opts?: OperationOpts): Observable<ProjectResponse | RawAjaxResponse<ProjectResponse>> {

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ProjectResponse>({
            url: '/projects',
            method: 'POST',
            headers,
            body: createProjectRequest,
        }, opts?.responseOpts);
    };

    /**
     * プロジェクトの削除
     */
    projectsProjectIdDelete({ projectId }: ProjectsProjectIdDeleteRequest): Observable<void>
    projectsProjectIdDelete({ projectId }: ProjectsProjectIdDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    projectsProjectIdDelete({ projectId }: ProjectsProjectIdDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdDelete');

        return this.request<void>({
            url: '/projects/{projectId}'.replace('{projectId}', encodeURI(projectId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * プロジェクト取得(1件)
     */
    projectsProjectIdGet({ projectId }: ProjectsProjectIdGetRequest): Observable<ProjectResponse>
    projectsProjectIdGet({ projectId }: ProjectsProjectIdGetRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ProjectResponse>>
    projectsProjectIdGet({ projectId }: ProjectsProjectIdGetRequest, opts?: OperationOpts): Observable<ProjectResponse | RawAjaxResponse<ProjectResponse>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdGet');

        return this.request<ProjectResponse>({
            url: '/projects/{projectId}'.replace('{projectId}', encodeURI(projectId)),
            method: 'GET',
        }, opts?.responseOpts);
    };

    /**
     * ラベルの削除
     */
    projectsProjectIdLabelsLabelIdDelete({ projectId, labelId }: ProjectsProjectIdLabelsLabelIdDeleteRequest): Observable<void>
    projectsProjectIdLabelsLabelIdDelete({ projectId, labelId }: ProjectsProjectIdLabelsLabelIdDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    projectsProjectIdLabelsLabelIdDelete({ projectId, labelId }: ProjectsProjectIdLabelsLabelIdDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdLabelsLabelIdDelete');
        throwIfNullOrUndefined(labelId, 'labelId', 'projectsProjectIdLabelsLabelIdDelete');

        return this.request<void>({
            url: '/projects/{projectId}/labels/{labelId}'.replace('{projectId}', encodeURI(projectId)).replace('{labelId}', encodeURI(labelId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * ラベルの更新
     */
    projectsProjectIdLabelsLabelIdPut({ projectId, labelId, updateLabelRequest }: ProjectsProjectIdLabelsLabelIdPutRequest): Observable<LabelResponse>
    projectsProjectIdLabelsLabelIdPut({ projectId, labelId, updateLabelRequest }: ProjectsProjectIdLabelsLabelIdPutRequest, opts?: OperationOpts): Observable<RawAjaxResponse<LabelResponse>>
    projectsProjectIdLabelsLabelIdPut({ projectId, labelId, updateLabelRequest }: ProjectsProjectIdLabelsLabelIdPutRequest, opts?: OperationOpts): Observable<LabelResponse | RawAjaxResponse<LabelResponse>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdLabelsLabelIdPut');
        throwIfNullOrUndefined(labelId, 'labelId', 'projectsProjectIdLabelsLabelIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LabelResponse>({
            url: '/projects/{projectId}/labels/{labelId}'.replace('{projectId}', encodeURI(projectId)).replace('{labelId}', encodeURI(labelId)),
            method: 'PUT',
            headers,
            body: updateLabelRequest,
        }, opts?.responseOpts);
    };

    /**
     * ラベルの作成
     */
    projectsProjectIdLabelsPost({ projectId, createLabelRequest }: ProjectsProjectIdLabelsPostRequest): Observable<LabelResponse>
    projectsProjectIdLabelsPost({ projectId, createLabelRequest }: ProjectsProjectIdLabelsPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<LabelResponse>>
    projectsProjectIdLabelsPost({ projectId, createLabelRequest }: ProjectsProjectIdLabelsPostRequest, opts?: OperationOpts): Observable<LabelResponse | RawAjaxResponse<LabelResponse>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdLabelsPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<LabelResponse>({
            url: '/projects/{projectId}/labels/'.replace('{projectId}', encodeURI(projectId)),
            method: 'POST',
            headers,
            body: createLabelRequest,
        }, opts?.responseOpts);
    };

    /**
     * プロジェクトの更新
     */
    projectsProjectIdPut({ projectId, updateProjectRequest }: ProjectsProjectIdPutRequest): Observable<ProjectResponse>
    projectsProjectIdPut({ projectId, updateProjectRequest }: ProjectsProjectIdPutRequest, opts?: OperationOpts): Observable<RawAjaxResponse<ProjectResponse>>
    projectsProjectIdPut({ projectId, updateProjectRequest }: ProjectsProjectIdPutRequest, opts?: OperationOpts): Observable<ProjectResponse | RawAjaxResponse<ProjectResponse>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<ProjectResponse>({
            url: '/projects/{projectId}'.replace('{projectId}', encodeURI(projectId)),
            method: 'PUT',
            headers,
            body: updateProjectRequest,
        }, opts?.responseOpts);
    };

    /**
     * タスクの作成
     */
    projectsProjectIdTasksPost({ projectId, createTaskRequest }: ProjectsProjectIdTasksPostRequest): Observable<TaskResponse>
    projectsProjectIdTasksPost({ projectId, createTaskRequest }: ProjectsProjectIdTasksPostRequest, opts?: OperationOpts): Observable<RawAjaxResponse<TaskResponse>>
    projectsProjectIdTasksPost({ projectId, createTaskRequest }: ProjectsProjectIdTasksPostRequest, opts?: OperationOpts): Observable<TaskResponse | RawAjaxResponse<TaskResponse>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdTasksPost');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<TaskResponse>({
            url: '/projects/{projectId}/tasks/'.replace('{projectId}', encodeURI(projectId)),
            method: 'POST',
            headers,
            body: createTaskRequest,
        }, opts?.responseOpts);
    };

    /**
     * タスクの削除
     */
    projectsProjectIdTasksTaskIdDelete({ projectId, taskId }: ProjectsProjectIdTasksTaskIdDeleteRequest): Observable<void>
    projectsProjectIdTasksTaskIdDelete({ projectId, taskId }: ProjectsProjectIdTasksTaskIdDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>>
    projectsProjectIdTasksTaskIdDelete({ projectId, taskId }: ProjectsProjectIdTasksTaskIdDeleteRequest, opts?: OperationOpts): Observable<void | RawAjaxResponse<void>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdTasksTaskIdDelete');
        throwIfNullOrUndefined(taskId, 'taskId', 'projectsProjectIdTasksTaskIdDelete');

        return this.request<void>({
            url: '/projects/{projectId}/tasks/{taskId}'.replace('{projectId}', encodeURI(projectId)).replace('{taskId}', encodeURI(taskId)),
            method: 'DELETE',
        }, opts?.responseOpts);
    };

    /**
     * タスクの更新
     */
    projectsProjectIdTasksTaskIdPut({ projectId, taskId, updateTaskRequest }: ProjectsProjectIdTasksTaskIdPutRequest): Observable<TaskResponse>
    projectsProjectIdTasksTaskIdPut({ projectId, taskId, updateTaskRequest }: ProjectsProjectIdTasksTaskIdPutRequest, opts?: OperationOpts): Observable<RawAjaxResponse<TaskResponse>>
    projectsProjectIdTasksTaskIdPut({ projectId, taskId, updateTaskRequest }: ProjectsProjectIdTasksTaskIdPutRequest, opts?: OperationOpts): Observable<TaskResponse | RawAjaxResponse<TaskResponse>> {
        throwIfNullOrUndefined(projectId, 'projectId', 'projectsProjectIdTasksTaskIdPut');
        throwIfNullOrUndefined(taskId, 'taskId', 'projectsProjectIdTasksTaskIdPut');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
        };

        return this.request<TaskResponse>({
            url: '/projects/{projectId}/tasks/{taskId}'.replace('{projectId}', encodeURI(projectId)).replace('{taskId}', encodeURI(taskId)),
            method: 'PUT',
            headers,
            body: updateTaskRequest,
        }, opts?.responseOpts);
    };

}
